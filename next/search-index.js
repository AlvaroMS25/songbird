var searchIndex = JSON.parse('{\
"songbird":{"doc":"project logo","i":[[4,"Bitrate","songbird","",null,null],[13,"BitsPerSecond","","Explicit bitrate choice (in bits/second).",0,null],[13,"Max","","Maximum bitrate allowed (up to maximum number of bytes for…",0,null],[13,"Auto","","Default bitrate decided by the encoder (not recommended).",0,null],[0,"constants","","Constants affecting driver function and API handling.",null,null],[17,"VOICE_GATEWAY_VERSION","songbird::constants","The voice gateway version used by the library.",null,null],[17,"SAMPLE_RATE","","Sample rate of audio to be sent to Discord.",null,null],[17,"SAMPLE_RATE_RAW","","Sample rate of audio to be sent to Discord.",null,null],[17,"AUDIO_FRAME_RATE","","Number of audio frames/packets to be sent per second.",null,null],[17,"TIMESTEP_LENGTH","","Length of time between any two audio frames.",null,null],[17,"DEFAULT_BITRATE","","Default bitrate for audio.",null,null],[17,"MONO_FRAME_SIZE","","Number of samples in one complete frame of audio per…",null,null],[17,"STEREO_FRAME_SIZE","","Number of individual samples in one complete frame of…",null,null],[17,"MONO_FRAME_BYTE_SIZE","","Number of bytes in one complete frame of raw `f32`-encoded…",null,null],[17,"STEREO_FRAME_BYTE_SIZE","","Number of bytes in one complete frame of raw `f32`-encoded…",null,null],[17,"FRAME_LEN_MS","","Length (in milliseconds) of any audio frame.",null,null],[17,"CHILD_BUFFER_LEN","","Maximum number of audio frames/packets to be sent per…",null,null],[17,"VOICE_PACKET_MAX","","Maximum packet size for a voice packet.",null,null],[17,"UDP_KEEPALIVE_GAP_MS","","Delay between sends of UDP keepalive frames.",null,null],[17,"UDP_KEEPALIVE_GAP","","Type-converted delay between sends of UDP keepalive frames.",null,null],[17,"SILENT_FRAME","","Opus silent frame, used to signal speech start and end…",null,null],[17,"RTP_VERSION","","The one (and only) RTP version.",null,null],[17,"RTP_PROFILE_TYPE","","Profile type used by Discord\'s Opus audio traffic.",null,null],[0,"driver","songbird","Runner for a voice connection.",null,null],[3,"Config","songbird::driver","Configuration for the inner Driver.",null,null],[12,"crypto_mode","","Selected tagging mode for voice packet encryption.",1,null],[12,"decode_mode","","Configures whether decoding and decryption occur for all…",1,null],[12,"preallocated_tracks","","Number of concurrently active tracks to allocate memory for.",1,null],[4,"CryptoMode","","Variants of the XSalsa20Poly1305 encryption scheme.",null,null],[13,"Normal","","The RTP header is used as the source of nonce bytes for…",2,null],[13,"Suffix","","An additional random 24B suffix is used as the source of…",2,null],[13,"Lite","","An additional random 4B suffix is used as the source of…",2,null],[4,"DecodeMode","","Decode behaviour for received RTP packets within the driver.",null,null],[13,"Pass","","Packets received from Discord are handed over to events…",3,null],[13,"Decrypt","","Decrypts the body of each received packet.",3,null],[13,"Decode","","Decrypts and decodes each received packet, correctly…",3,null],[3,"Driver","","The control object for a Discord voice connection,…",null,null],[11,"new","","Creates a new voice driver.",4,[[["config",3]]]],[11,"connect","","Connects to a voice channel using the specified server.",4,[[["connectioninfo",3]],[["result",6],["receiver",3]]]],[11,"leave","","Leaves the current voice channel, disconnecting from it.",4,[[]]],[11,"mute","","Sets whether the current connection is to be muted.",4,[[]]],[11,"is_mute","","Returns whether the driver is muted (i.e., processes audio…",4,[[]]],[11,"play_source","","Plays audio from a source, returning a handle for further…",4,[[["input",3]],["trackhandle",3]]],[11,"play_only_source","","Plays audio from a source, returning a handle for further…",4,[[["input",3]],["trackhandle",3]]],[11,"play","","Plays audio from a [`Track`] object.",4,[[["track",3]]]],[11,"play_only","","Exclusively plays audio from a `Track` object.",4,[[["track",3]]]],[11,"set_bitrate","","Sets the bitrate for encoding Opus packets sent along the…",4,[[["bitrate",4]]]],[11,"stop","","Stops playing audio from all sources, if any are set.",4,[[]]],[11,"set_config","","Sets the configuration for this driver.",4,[[["config",3]]]],[11,"add_global_event","","Attach a global event handler to an audio context. Global…",4,[[["event",4],["eventhandler",8]]]],[11,"queue","","Returns a reference to this driver\'s built-in queue.",4,[[],["trackqueue",3]]],[11,"enqueue_source","","Adds an audio `Input` to this driver\'s built-in queue.",4,[[["input",3]]]],[11,"enqueue","","Adds an existing `Track` to this driver\'s built-in queue.",4,[[["track",3]]]],[0,"error","songbird","Driver and gateway error handling.",null,null],[4,"JoinError","songbird::error","Error returned when a manager or call handler is unable to…",null,null],[13,"NoSender","","No available gateway connection was provided to send voice…",5,null],[13,"NoCall","","Tried to leave a `Call` which was not found.",5,null],[13,"Serenity","","Serenity-specific WebSocket send error.",5,null],[13,"Twilight","","Twilight-specific WebSocket send error.",5,null],[6,"JoinResult","","Convenience type for Discord gateway error handling.",null,null],[4,"ConnectionError","","Errors encountered while connecting to a Discord voice…",null,null],[13,"Crypto","","An error occurred during [en/de]cryption of voice packets…",6,null],[13,"CryptoModeInvalid","","Server did not return the expected crypto mode during…",6,null],[13,"CryptoModeUnavailable","","Selected crypto mode was not offered by server.",6,null],[13,"EndpointUrl","","An indicator that an endpoint URL was invalid.",6,null],[13,"ExpectedHandshake","","Discord hello/ready handshake was violated.",6,null],[13,"IllegalDiscoveryResponse","","Discord failed to correctly respond to IP discovery.",6,null],[13,"IllegalIp","","Could not parse Discord\'s view of our IP.",6,null],[13,"Io","","Miscellaneous I/O error.",6,null],[13,"Json","","JSON (de)serialization error.",6,null],[13,"InterconnectFailure","","Failed to message other background tasks after connection…",6,null],[13,"Ws","","Error communicating with gateway server over WebSocket.",6,null],[6,"ConnectionResult","","Convenience type for Discord voice/driver connection error…",null,null],[0,"events","songbird","Events relating to tracks, timing, and other callers.",null,null],[4,"EventContext","songbird::events","Information about which tracks or data fired an event.",null,null],[13,"Track","","Track event context, passed to events created via…",7,null],[13,"SpeakingStateUpdate","","Speaking state update, typically describing how another…",7,null],[13,"SpeakingUpdate","","Speaking state transition, describing whether a given…",7,null],[12,"ssrc","songbird::events::EventContext","Synchronisation Source of the user who has begun speaking.",8,null],[12,"speaking","","Whether this user is currently speaking.",8,null],[13,"VoicePacket","songbird::events","Opus audio packet, received from another stream (detailed…",7,null],[12,"audio","songbird::events::EventContext","Decoded audio from this packet.",9,null],[12,"packet","","Raw RTP packet data.",9,null],[12,"payload_offset","","Byte index into the packet body (after headers) for where…",9,null],[12,"payload_end_pad","","Number of bytes at the end of the packet to discard.",9,null],[13,"RtcpPacket","songbird::events","Telemetry/statistics packet, received from another stream…",7,null],[12,"packet","songbird::events::EventContext","Raw RTCP packet data.",10,null],[12,"payload_offset","","Byte index into the packet body (after headers) for where…",10,null],[12,"payload_end_pad","","Number of bytes at the end of the packet to discard.",10,null],[13,"ClientConnect","songbird::events","Fired whenever a client connects to a call for the first…",7,null],[13,"ClientDisconnect","","Fired whenever a client disconnects.",7,null],[4,"CoreEvent","","Voice core events occur on receipt of voice packets and…",null,null],[13,"SpeakingStateUpdate","","Fired on receipt of a speaking state update from another…",11,null],[13,"SpeakingUpdate","","Fires when a source starts speaking, or stops speaking…",11,null],[13,"VoicePacket","","Fires on receipt of a voice packet from another stream in…",11,null],[13,"RtcpPacket","","Fires on receipt of an RTCP packet, containing various…",11,null],[13,"ClientConnect","","Fires whenever a user connects to the same stream as the…",11,null],[13,"ClientDisconnect","","Fires whenever a user disconnects from the same stream as…",11,null],[3,"EventData","","Internal representation of an event, as handled by the…",null,null],[3,"EventStore","","Storage for `EventData`, designed to be used for both…",null,null],[4,"TrackEvent","","Track events correspond to certain actions or changes of…",null,null],[13,"End","","The attached track has ended.",12,null],[13,"Loop","","The attached track has looped.",12,null],[4,"UntimedEvent","","Track and voice core events.",null,null],[13,"Track","","Untimed events belonging to a track, such as state…",13,null],[13,"Core","","Untimed events belonging to the global context, such as…",13,null],[8,"EventHandler","","Trait to handle an event which can be fired per-track, or…",null,null],[10,"act","","Respond to one received event.",14,[[["eventcontext",4]],[["box",3],["pin",3]]]],[4,"Event","","Classes of event which may occur, triggering a handler at…",null,null],[13,"Periodic","","Periodic events rely upon two parameters: a period and an…",15,null],[13,"Delayed","","Delayed events rely upon a delay parameter, and fire one…",15,null],[13,"Track","","Track events correspond to certain actions or changes of…",15,null],[13,"Core","","Core events",15,null],[13,"Cancel","","Cancels the event, if it was intended to persist.",15,null],[0,"id","songbird","Newtypes around Discord IDs for library cross-compatibility.",null,null],[3,"ChannelId","songbird::id","ID of a Discord voice/text channel.",null,null],[12,"0","","",16,null],[3,"GuildId","","ID of a Discord guild (colloquially, \\\"server\\\").",null,null],[12,"0","","",17,null],[3,"UserId","","ID of a Discord user.",null,null],[12,"0","","",18,null],[0,"input","songbird","Raw audio input data streams and sources.",null,null],[0,"cached","songbird::input","In-memory, shared input sources for reuse between calls,…",null,null],[3,"Compressed","songbird::input::cached","A wrapper around an existing `Input` which compresses the…",null,null],[12,"raw","","Inner shared bytestore.",19,null],[12,"metadata","","Metadata moved out of the captured source.",19,null],[12,"stereo","","Stereo-ness of the captured source.",19,null],[3,"OpusCompressor","","Transform applied inside `Compressed`, converting a…",null,null],[4,"LengthHint","","Expected amount of time that an input should last.",null,null],[13,"Bytes","","Estimate of a source\'s length in bytes.",20,null],[13,"Time","","Estimate of a source\'s length in time.",20,null],[5,"apply_length_hint","","Modify the given cache configuration to initially allocate…",null,[[["config",3]]]],[3,"Memory","","A wrapper around an existing `Input` which caches the…",null,null],[12,"raw","","Inner shared bytestore.",21,null],[12,"metadata","","Metadata moved out of the captured source.",21,null],[12,"kind","","Codec used to read the inner bytestore.",21,null],[12,"stereo","","Stereo-ness of the captured source.",21,null],[12,"container","","Framing mechanism for the inner bytestore.",21,null],[5,"compressed_cost_per_sec","","Estimates the cost, in B/s, of audio data compressed at…",null,[[["bitrate",4]]]],[5,"raw_cost_per_sec","","Calculates the cost, in B/s, of raw floating-point audio…",null,[[]]],[5,"default_config","","Provides the default config used by a cached source.",null,[[],["config",3]]],[0,"codec","songbird::input","Decoding schemes for input audio bytestreams.",null,null],[3,"OpusDecoderState","songbird::input::codec","Inner state used to decode Opus input sources.",null,null],[12,"decoder","","Inner decoder used to convert opus frames into a stream of…",22,null],[12,"allow_passthrough","","Controls whether this source allows direct Opus frame…",22,null],[4,"Codec","","State used to decode input bytes of an `Input`.",null,null],[13,"Opus","","The inner bytestream is encoded using the Opus codec, to…",23,null],[13,"Pcm","","The inner bytestream is encoded using raw `i16` samples.",23,null],[13,"FloatPcm","","The inner bytestream is encoded using raw `f32` samples.",23,null],[4,"CodecType","","Type of data being passed into an `Input`.",null,null],[13,"Opus","","The inner bytestream is encoded using the Opus codec.",24,null],[13,"Pcm","","The inner bytestream is encoded using raw `i16` samples.",24,null],[13,"FloatPcm","","The inner bytestream is encoded using raw `f32` samples.",24,null],[11,"sample_len","","Returns the length of a single output sample, in bytes.",24,[[]]],[0,"error","songbird::input","Errors caused by input creation.",null,null],[4,"Error","songbird::input::error","An error returned when creating a new `Input`.",null,null],[13,"Dca","","An error occurred while opening a new DCA source.",25,null],[13,"Io","","An error occurred while reading, or opening a file.",25,null],[13,"Json","","An error occurred while parsing JSON (i.e., during…",25,null],[13,"Opus","","An error occurred within the Opus codec.",25,null],[13,"Metadata","","Failed to extract metadata from alternate pipe.",25,null],[13,"Stdout","","Apparently failed to create stdout.",25,null],[13,"Streams","","An error occurred while checking if a path is stereo.",25,null],[13,"Streamcatcher","","Configuration error for a cached Input.",25,null],[13,"YouTubeDLProcessing","","An error occurred while processing the JSON output from…",25,null],[13,"YouTubeDLRun","","An error occurred while running `youtube-dl`.",25,null],[13,"YouTubeDLUrl","","The `url` field of the `youtube-dl` JSON output was not…",25,null],[4,"DcaError","","An error returned from the `dca` method.",null,null],[13,"IoError","","An error occurred while reading, or opening a file.",26,null],[13,"InvalidHeader","","The file opened did not have a valid DCA JSON header.",26,null],[13,"InvalidMetadata","","The file\'s metadata block was invalid, or could not be…",26,null],[13,"InvalidSize","","The file\'s header reported an invalid metadata block size.",26,null],[13,"Opus","","An error was encountered while creating a new Opus decoder.",26,null],[6,"Result","","Convenience type for fallible return of `Input`s.",null,null],[0,"reader","songbird::input","Raw handlers for input bytestreams.",null,null],[4,"Reader","songbird::input::reader","Usable data/byte sources for an audio stream.",null,null],[13,"Pipe","","Piped output of another program (i.e., `ffmpeg`).",27,null],[13,"Memory","","A cached, raw in-memory store, provided by Songbird.",27,null],[13,"Compressed","","A cached, Opus-compressed in-memory store, provided by…",27,null],[13,"Restartable","","A source which supports seeking by recreating its inout…",27,null],[13,"File","","A source contained in a local file.",27,null],[13,"Vec","","A source contained as an array in memory.",27,null],[13,"Extension","","A basic user-provided source.",27,null],[13,"ExtensionSeek","","A user-provided source which also implements `Seek`.",27,null],[11,"is_seekable","","Returns whether the given source implements `Seek`.",27,[[]]],[8,"ReadSeek","","Fusion trait for custom input sources which allow seeking.",null,null],[10,"read","","See `Read::read`.",28,[[],["ioresult",6]]],[10,"seek","","See `Seek::seek`.",28,[[["seekfrom",4]],["ioresult",6]]],[0,"restartable","songbird::input","A source which supports seeking by recreating its input…",null,null],[3,"Restartable","songbird::input::restartable","A wrapper around a method to create a new `Input` which…",null,null],[11,"new","","Create a new source, which can be restarted using a…",29,[[]]],[11,"ffmpeg","","Create a new restartable ffmpeg source for a local file.",29,[[["osstr",3],["asref",8],["clone",8],["sync",8],["send",8]]]],[11,"ytdl","","Create a new restartable ytdl source.",29,[[["clone",8],["asref",8],["sync",8],["send",8]]]],[11,"ytdl_search","","Create a new restartable ytdl source, using the first…",29,[[]]],[8,"Restart","","Trait used to create an instance of a `Reader` at…",null,null],[10,"call_restart","","Tries to create a replacement source.",30,[[["duration",3],["option",4]],[["pin",3],["box",3]]]],[0,"utils","songbird::input","Utility methods for seeking or decoding.",null,null],[5,"timestamp_to_sample_count","songbird::input::utils","Calculates the sample position in a FloatPCM stream from a…",null,[[["duration",3]]]],[5,"sample_count_to_timestamp","","Calculates the time position in a FloatPCM stream from a…",null,[[],["duration",3]]],[5,"timestamp_to_byte_count","","Calculates the byte position in a FloatPCM stream from a…",null,[[["duration",3]]]],[5,"byte_count_to_timestamp","","Calculates the time position in a FloatPCM stream from a…",null,[[],["duration",3]]],[5,"decoder","","Create an Opus decoder outputting at a sample rate of 48kHz.",null,[[],[["opusresult",6],["decoder",3]]]],[3,"ChildContainer","songbird::input","Handle for a child process which ensures that any…",null,null],[4,"Container","","Marker and state for decoding framed input files.",null,null],[13,"Raw","","Raw, unframed input.",31,null],[13,"Dca","","Framed input, beginning with a JSON header.",31,null],[12,"first_frame","songbird::input::Container","Byte index of the first frame after the JSON header.",32,null],[3,"Frame","songbird::input","Information used in audio frame detection.",null,null],[12,"header_len","","Length of this frame\'s header, in bytes.",33,null],[12,"frame_len","","Payload length, in bytes.",33,null],[5,"dca","","Creates a streamed audio source from a DCA file. Currently…",null,[[["osstr",3],["asref",8]]]],[5,"ffmpeg","","Opens an audio file through `ffmpeg` and creates an audio…",null,[[["osstr",3],["asref",8]]]],[5,"ffmpeg_optioned","","Opens an audio file through `ffmpeg` and creates an audio…",null,[[["osstr",3],["asref",8]]]],[3,"Metadata","","Information about an `Input` source.",null,null],[12,"title","","The title of this stream.",34,null],[12,"artist","","The main artist of this stream.",34,null],[12,"date","","The date of creation of this stream.",34,null],[12,"channels","","The number of audio channels in this stream.",34,null],[12,"start_time","","The time at which the first true sample is played back.",34,null],[12,"duration","","The reported duration of this stream.",34,null],[12,"sample_rate","","The sample rate of this stream.",34,null],[5,"ytdl","","Creates a streamed audio source with `youtube-dl` and…",null,[[]]],[5,"ytdl_search","","Creates a streamed audio source from YouTube search…",null,[[]]],[3,"Input","","Data and metadata needed to correctly parse a `Reader`\'s…",null,null],[12,"metadata","","Information about the played source.",35,null],[12,"stereo","","Indicates whether `source` is stereo or mono.",35,null],[12,"reader","","Underlying audio data bytestream.",35,null],[12,"kind","","Decoder used to parse the output of `reader`.",35,null],[12,"container","","Framing strategy needed to identify frames of compressed…",35,null],[11,"float_pcm","","Creates a floating-point PCM Input from a given reader.",35,[[["reader",4]],["input",3]]],[11,"new","","Creates a new Input using (at least) the given reader,…",35,[[["container",4],["metadata",3],["reader",4],["codec",4],["option",4]]]],[11,"is_seekable","","Returns whether the inner `Reader` implements `Seek`.",35,[[]]],[11,"is_stereo","","Returns whether the read audio signal is stereo (or mono).",35,[[]]],[11,"get_type","","Returns the type of the inner `Codec`.",35,[[],["codectype",4]]],[11,"mix","","Mixes the output of this stream into a 20ms stereo audio…",35,[[]]],[11,"seek_time","","Seeks the stream to the given time, if possible.",35,[[["duration",3]],[["duration",3],["option",4]]]],[0,"serenity","songbird","Compatability and convenience methods for working with…",null,null],[3,"SongbirdKey","songbird::serenity","Zero-size type used to retrieve the registered `Songbird`…",null,null],[5,"register","","Installs a new songbird instance into the serenity client.",null,[[["clientbuilder",3]],["clientbuilder",3]]],[5,"register_with","","Installs a given songbird instance into the serenity client.",null,[[["clientbuilder",3],["arc",3],["songbird",3]],["clientbuilder",3]]],[5,"get","","Retrieve the Songbird voice client from a serenity…",null,[[["context",3]]]],[8,"SerenityInit","","Helper trait to add installation/creation methods to…",null,null],[10,"register_songbird","","Registers a new Songbird voice system with serenity,…",36,[[]]],[10,"register_songbird_with","","Registers a given Songbird voice system with serenity, as…",36,[[["arc",3],["songbird",3]]]],[0,"shards","songbird","Handlers for sending packets over sharded connections.",null,null],[4,"Sharder","songbird::shards","Source of individual shard connection handles.",null,null],[13,"Serenity","","Serenity-specific wrapper for sharder state initialised by…",37,null],[13,"Twilight","","Twilight-specific wrapper for sharder state initialised by…",37,null],[11,"get_shard","","Returns a new handle to the required inner shard.",37,[[],[["option",4],["shard",4]]]],[3,"SerenitySharder","","Serenity-specific wrapper for sharder state initialised by…",null,null],[4,"Shard","","A reference to an individual websocket connection.",null,null],[13,"Serenity","","Handle to one of serenity\'s shard runners.",38,null],[13,"Twilight","","Handle to a twilight shard spawned from a cluster.",38,null],[11,"send","","Send a JSON message to the inner shard handle.",38,[[["value",4]]]],[3,"SerenityShardHandle","","Handle to an individual shard designed to buffer unsent…",null,null],[0,"tracks","songbird","Live, controllable audio instances.",null,null],[4,"TrackCommand","songbird::tracks","A request from external code using a `TrackHandle` to…",null,null],[13,"Play","","Set the track\'s play_mode to play/resume.",39,null],[13,"Pause","","Set the track\'s play_mode to pause.",39,null],[13,"Stop","","Stop the target track. This cannot be undone.",39,null],[13,"Volume","","Set the track\'s volume.",39,null],[13,"Seek","","Seek to the given duration.",39,null],[13,"AddEvent","","Register an event on this track.",39,null],[13,"Do","","Run some closure on this track, with direct access to the…",39,null],[13,"Request","","Request a read-only view of this track\'s state.",39,null],[13,"Loop","","Change the loop count/strategy of this track.",39,null],[3,"TrackHandle","","Handle for safe control of a `Track` track from other…",null,null],[4,"LoopState","","Looping behaviour for a `Track`.",null,null],[13,"Infinite","","Track will loop endlessly until loop state is changed or…",40,null],[13,"Finite","","Track will loop `n` more times.",40,null],[4,"PlayMode","","Playback status of a track.",null,null],[13,"Play","","The track is currently playing.",41,null],[13,"Pause","","The track is currently paused, and may be resumed.",41,null],[13,"Stop","","The track has been manually stopped, and cannot be…",41,null],[13,"End","","The track has naturally ended, and cannot be restarted.",41,null],[3,"TrackQueue","","A simple queue for several audio sources, designed to play…",null,null],[3,"Queued","","Reference to a track which is known to be part of a queue.",null,null],[3,"TrackState","","State of an `Track` object, designed to be passed to event…",null,null],[12,"playing","","Play status (e.g., active, paused, stopped) of this track.",42,null],[12,"volume","","Current volume of this track.",42,null],[12,"position","","Current playback position in the source.",42,null],[12,"play_time","","Total playback time, increasing monotonically.",42,null],[12,"loops","","Remaining loops on this track.",42,null],[3,"Track","","Control object for audio playback.",null,null],[12,"events","","List of events attached to this audio track.",43,null],[12,"handle","","Handle for safe control of this audio track from other…",43,null],[12,"loops","","Count of remaining loops.",43,null],[11,"new_raw","","Create a new track directly from an input, command source,…",43,[[["unboundedreceiver",3],["trackhandle",3],["input",3],["trackcommand",4]]]],[11,"play","","Sets a track to playing if it is paused.",43,[[]]],[11,"pause","","Pauses a track if it is playing.",43,[[]]],[11,"stop","","Manually stops a track.",43,[[]]],[11,"playing","","Returns the current play status of this track.",43,[[],["playmode",4]]],[11,"set_volume","","Sets `volume` in a manner that allows method chaining.",43,[[]]],[11,"volume","","Returns the current playback position.",43,[[]]],[11,"position","","Returns the current playback position.",43,[[],["duration",3]]],[11,"play_time","","Returns the total length of time this track has been active.",43,[[],["duration",3]]],[11,"set_loops","","Sets `loops` in a manner that allows method chaining.",43,[[["loopstate",4]]]],[11,"state","","Creates a read-only copy of the audio track\'s state.",43,[[],["trackstate",3]]],[11,"seek_time","","Seek to a specific point in the track.",43,[[["duration",3]],[["duration",3],["option",4]]]],[11,"uuid","","Returns this track\'s unique identifier.",43,[[],["uuid",3]]],[5,"create_player","","Creates a `Track` object to pass into the audio context,…",null,[[["input",3]]]],[6,"TrackResult","","Alias for most result-free calls to a `TrackHandle`.",null,null],[6,"TrackQueryResult","","Alias for return value from calls to…",null,null],[4,"CoreEvent","songbird","Voice core events occur on receipt of voice packets and…",null,null],[13,"SpeakingStateUpdate","","Fired on receipt of a speaking state update from another…",11,null],[13,"SpeakingUpdate","","Fires when a source starts speaking, or stops speaking…",11,null],[13,"VoicePacket","","Fires on receipt of a voice packet from another stream in…",11,null],[13,"RtcpPacket","","Fires on receipt of an RTCP packet, containing various…",11,null],[13,"ClientConnect","","Fires whenever a user connects to the same stream as the…",11,null],[13,"ClientDisconnect","","Fires whenever a user disconnects from the same stream as…",11,null],[4,"EventContext","","Information about which tracks or data fired an event.",null,null],[13,"Track","","Track event context, passed to events created via…",7,null],[13,"SpeakingStateUpdate","","Speaking state update, typically describing how another…",7,null],[13,"SpeakingUpdate","","Speaking state transition, describing whether a given…",7,null],[12,"ssrc","songbird::EventContext","Synchronisation Source of the user who has begun speaking.",8,null],[12,"speaking","","Whether this user is currently speaking.",8,null],[13,"VoicePacket","songbird","Opus audio packet, received from another stream (detailed…",7,null],[12,"audio","songbird::EventContext","Decoded audio from this packet.",9,null],[12,"packet","","Raw RTP packet data.",9,null],[12,"payload_offset","","Byte index into the packet body (after headers) for where…",9,null],[12,"payload_end_pad","","Number of bytes at the end of the packet to discard.",9,null],[13,"RtcpPacket","songbird","Telemetry/statistics packet, received from another stream…",7,null],[12,"packet","songbird::EventContext","Raw RTCP packet data.",10,null],[12,"payload_offset","","Byte index into the packet body (after headers) for where…",10,null],[12,"payload_end_pad","","Number of bytes at the end of the packet to discard.",10,null],[13,"ClientConnect","songbird","Fired whenever a client connects to a call for the first…",7,null],[13,"ClientDisconnect","","Fired whenever a client disconnects.",7,null],[4,"TrackEvent","","Track events correspond to certain actions or changes of…",null,null],[13,"End","","The attached track has ended.",12,null],[13,"Loop","","The attached track has looped.",12,null],[5,"ffmpeg","","Opens an audio file through `ffmpeg` and creates an audio…",null,[[["osstr",3],["asref",8]]]],[5,"ytdl","","Creates a streamed audio source with `youtube-dl` and…",null,[[]]],[3,"Call","","The Call handler is responsible for a single voice…",null,null],[3,"Songbird","","A shard-aware struct responsible for managing `Call`s.",null,null],[3,"ConnectionInfo","","Parameters and information needed to start communicating…",null,null],[12,"endpoint","","URL of the voice websocket gateway server assigned to this…",44,null],[12,"guild_id","","ID of the target voice channel\'s parent guild.",44,null],[12,"session_id","","Unique string describing this session for…",44,null],[12,"token","","Ephemeral secret used to validate the above session.",44,null],[12,"user_id","","UserID of this bot.",44,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"from","songbird::driver","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","songbird::error","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","songbird::driver","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"equivalent","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"equivalent","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","songbird::error","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","songbird::events","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"equivalent","","",11,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"equivalent","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"equivalent","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"equivalent","","",13,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"equivalent","","",15,[[]]],[11,"from","songbird","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","songbird::id","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"equivalent","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"equivalent","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"equivalent","","",18,[[]]],[11,"from","songbird","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","songbird::input::cached","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","songbird::input","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"skip","","",49,[[]]],[11,"from","songbird::input::codec","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","songbird::input","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","songbird::input::error","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","songbird::input","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"equivalent","","",34,[[]]],[11,"read","songbird::input::reader","",27,[[],[["error",3],["result",4]]]],[11,"seek","","",27,[[["seekfrom",4]],[["result",4],["error",3]]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"skip","","",27,[[]]],[11,"read","songbird::input::restartable","",29,[[],[["error",3],["result",4]]]],[11,"seek","","",29,[[["seekfrom",4]],[["result",4],["error",3]]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"skip","","",29,[[]]],[11,"read","songbird::input","",35,[[],[["error",3],["result",4]]]],[11,"seek","","",35,[[["seekfrom",4]],[["result",4],["error",3]]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"skip","","",35,[[]]],[11,"from","songbird","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","songbird::serenity","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","songbird::shards","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","songbird::tracks","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"equivalent","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"equivalent","","",41,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"eq","songbird","",0,[[["bitrate",4]]]],[11,"ne","","",0,[[["bitrate",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",0,[[]]],[11,"try_from","","",0,[[],[["bitrate",4],["result",4],["error",4]]]],[11,"clone","","",0,[[],["bitrate",4]]],[11,"drop","songbird::driver","Leaves the current connected voice channel, if connected…",4,[[]]],[11,"drop","songbird::input","",49,[[]]],[11,"from","songbird::error","",6,[[["cryptoerror",3]]]],[11,"from","","",6,[[["ioerror",3]],["error",4]]],[11,"from","","",6,[[["jsonerror",3]],["error",4]]],[11,"from","","",6,[[["senderror",3],["wsmessage",4]],["error",4]]],[11,"from","","",6,[[["senderror",3],["eventmessage",4]],["error",4]]],[11,"from","","",6,[[["senderror",3],["mixermessage",4]],["error",4]]],[11,"from","","",5,[[["trysenderror",3],["intermessage",4]]]],[11,"from","","",5,[[["commanderror",4]]]],[11,"from","songbird::events","",13,[[["trackevent",4]]]],[11,"from","","",13,[[["coreevent",4]]]],[11,"from","","",15,[[["trackevent",4]]]],[11,"from","","",15,[[["coreevent",4]]]],[11,"from","songbird::id","",16,[[]]],[11,"from","","",16,[[["serenitychannel",3]]]],[11,"from","","",16,[[["twilightchannel",3]]]],[11,"from","","",17,[[]]],[11,"from","","",17,[[["serenityguild",3]]]],[11,"from","","",17,[[["twilightguild",3]]]],[11,"from","","",18,[[]]],[11,"from","","",18,[[["serenityuser",3]]]],[11,"from","","",18,[[["twilightuser",3]]]],[11,"from","songbird::input","",35,[[["compressed",3]]]],[11,"from","songbird::input::cached","",20,[[]]],[11,"from","","",20,[[["duration",3]]]],[11,"from","songbird::input::reader","",27,[[["child",3]]]],[11,"from","songbird::input::codec","",24,[[["codec",4]]]],[11,"from","songbird::input::error","",25,[[["catchererror",4]]]],[11,"from","","",25,[[["dcaerror",4]]]],[11,"from","","",25,[[["ioerror",3]],["error",4]]],[11,"from","","",25,[[["jsonerror",3]]]],[11,"from","","",25,[[["opuserror",4]],["error",4]]],[11,"from","songbird::input::reader","",27,[[["vec",3]],["reader",4]]],[11,"from","songbird::input","",35,[[["restartable",3]]]],[11,"clone","songbird::driver","",1,[[],["config",3]]],[11,"clone","","",2,[[],["cryptomode",4]]],[11,"clone","","",3,[[],["decodemode",4]]],[11,"clone","","",4,[[],["driver",3]]],[11,"clone","songbird::events","",7,[[],["eventcontext",4]]],[11,"clone","","",11,[[],["coreevent",4]]],[11,"clone","","",12,[[],["trackevent",4]]],[11,"clone","","",13,[[],["untimedevent",4]]],[11,"clone","","",15,[[],["event",4]]],[11,"clone","songbird","",47,[[],["call",3]]],[11,"clone","songbird::id","",16,[[],["channelid",3]]],[11,"clone","","",17,[[],["guildid",3]]],[11,"clone","","",18,[[],["userid",3]]],[11,"clone","songbird","",44,[[],["connectioninfo",3]]],[11,"clone","songbird::input::cached","",19,[[],["compressed",3]]],[11,"clone","","",20,[[],["lengthhint",4]]],[11,"clone","","",21,[[],["memory",3]]],[11,"clone","songbird::input::codec","",22,[[],["opusdecoderstate",3]]],[11,"clone","","",23,[[],["codec",4]]],[11,"clone","","",24,[[],["codectype",4]]],[11,"clone","songbird::input","",33,[[],["frame",3]]],[11,"clone","","",31,[[],["container",4]]],[11,"clone","","",34,[[],["metadata",3]]],[11,"clone","songbird::shards","",38,[[],["shard",4]]],[11,"clone","songbird::tracks","",54,[[],["trackhandle",3]]],[11,"clone","","",40,[[],["loopstate",4]]],[11,"clone","","",41,[[],["playmode",4]]],[11,"clone","","",55,[[],["trackqueue",3]]],[11,"clone","","",42,[[],["trackstate",3]]],[11,"default","songbird::driver","",1,[[]]],[11,"default","","",4,[[]]],[11,"default","songbird::events","",46,[[],["eventstore",3]]],[11,"default","songbird::id","",16,[[],["channelid",3]]],[11,"default","","",17,[[],["guildid",3]]],[11,"default","","",18,[[],["userid",3]]],[11,"default","songbird::input","",34,[[],["metadata",3]]],[11,"default","songbird::shards","",52,[[],["serenitysharder",3]]],[11,"default","","",53,[[],["serenityshardhandle",3]]],[11,"default","songbird::tracks","",40,[[]]],[11,"default","","",41,[[]]],[11,"default","","",55,[[],["trackqueue",3]]],[11,"default","","",42,[[],["trackstate",3]]],[11,"cmp","songbird::events","",45,[[],["ordering",4]]],[11,"eq","songbird::driver","",2,[[["cryptomode",4]]]],[11,"eq","","",3,[[["decodemode",4]]]],[11,"eq","songbird::events","",11,[[["coreevent",4]]]],[11,"eq","","",45,[[]]],[11,"eq","","",12,[[["trackevent",4]]]],[11,"eq","","",13,[[["untimedevent",4]]]],[11,"ne","","",13,[[["untimedevent",4]]]],[11,"eq","","",15,[[["event",4]]]],[11,"ne","","",15,[[["event",4]]]],[11,"eq","songbird::id","",16,[[["channelid",3]]]],[11,"ne","","",16,[[["channelid",3]]]],[11,"eq","","",17,[[["guildid",3]]]],[11,"ne","","",17,[[["guildid",3]]]],[11,"eq","","",18,[[["userid",3]]]],[11,"ne","","",18,[[["userid",3]]]],[11,"eq","songbird::input","",34,[[["metadata",3]]]],[11,"ne","","",34,[[["metadata",3]]]],[11,"eq","songbird::tracks","",40,[[["loopstate",4]]]],[11,"ne","","",40,[[["loopstate",4]]]],[11,"eq","","",41,[[["playmode",4]]]],[11,"eq","","",42,[[["trackstate",3]]]],[11,"ne","","",42,[[["trackstate",3]]]],[11,"partial_cmp","songbird::events","",45,[[],[["option",4],["ordering",4]]]],[11,"deref","songbird","",47,[[]]],[11,"deref","songbird::tracks","",56,[[]]],[11,"deref_mut","songbird","",47,[[]]],[11,"fmt","songbird::driver","",1,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::error","",6,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::driver","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::error","",5,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::events","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","songbird","",47,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::id","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","songbird","",44,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::input::cached","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::input","",49,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::input::codec","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::input","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::input::error","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::input","",34,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::input::reader","",27,[[["formatter",3]],[["stdresult",4],["formaterror",3]]]],[11,"fmt","songbird::input::restartable","",29,[[["formatter",3]],[["stdresult",4],["formaterror",3]]]],[11,"fmt","songbird::input","",35,[[["formatter",3]],["result",6]]],[11,"fmt","songbird","",50,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::shards","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::tracks","",39,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::error","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","songbird::id","",16,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",17,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",18,[[["formatter",3]],["fmtresult",6]]],[11,"hash","songbird::events","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",15,[[]]],[11,"hash","songbird::id","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"try_from","songbird::input","",35,[[["memory",3]],["result",6]]],[11,"try_from","songbird::input::codec","",23,[[["codectype",4]],["result",6]]],[11,"read","songbird::input","",49,[[],["ioresult",6]]],[11,"read","songbird::input::reader","",27,[[],["ioresult",6]]],[11,"read","","",28,[[],["ioresult",6]]],[11,"read","songbird::input::restartable","",29,[[],["ioresult",6]]],[11,"read","songbird::input","",35,[[],["ioresult",6]]],[11,"seek","songbird::input::reader","",27,[[["seekfrom",4]],["ioresult",6]]],[11,"seek","","",28,[[["seekfrom",4]],["ioresult",6]]],[11,"seek","songbird::input::restartable","",29,[[["seekfrom",4]],["ioresult",6]]],[11,"seek","songbird::input","",35,[[["seekfrom",4]],["ioresult",6]]],[11,"initialise","songbird","",50,[[["serenityuser",3]],[["box",3],["pin",3]]]],[11,"register_shard","","",50,[[["sender",3],["intermessage",4]],[["box",3],["pin",3]]]],[11,"deregister_shard","","",50,[[],[["box",3],["pin",3]]]],[11,"server_update","","",50,[[["serenityguild",3],["option",4]],[["box",3],["pin",3]]]],[11,"state_update","","",50,[[["serenityguild",3],["voicestate",3]],[["box",3],["pin",3]]]],[11,"transform_read","songbird::input::cached","",48,[[],[["transformposition",4],["ioresult",6]]]],[11,"min_bytes_required","","",48,[[]]],[11,"state","","",48,[[]]],[11,"crypto_mode","songbird::driver","Sets this `Config`\'s chosen cryptographic tagging scheme.",1,[[["cryptomode",4]]]],[11,"decode_mode","","Sets this `Config`\'s received packet decryption/decoding…",1,[[["decodemode",4]]]],[11,"preallocated_tracks","","Sets this `Config`\'s number of tracks to preallocate.",1,[[]]],[11,"to_request_str","","Returns the name of a mode as it will appear during…",2,[[]]],[11,"nonce_size","","Returns the number of bytes each nonce is stored as within…",2,[[]]],[11,"payload_prefix_len","","Returns the number of bytes occupied by the encryption…",2,[[]]],[11,"payload_suffix_len","","Returns the number of bytes occupied by the encryption…",2,[[]]],[11,"payload_overhead","","Calculates the number of additional bytes required…",2,[[]]],[11,"encrypt_in_place","","Encrypts a Discord RT(C)P packet using the given key.",2,[[["cipher",3]],[["result",4],["cryptoerror",3]]]],[11,"should_decrypt","","Returns whether this mode will decrypt received packets.",3,[[]]],[11,"to_core_event","songbird::events","Retreive the event class for an event (i.e., when…",7,[[],[["option",4],["coreevent",4]]]],[11,"new","","Create a representation of an event and its associated…",45,[[["event",4],["eventhandler",8]]]],[11,"compute_activation","","Computes the next firing time for a timer event.",45,[[["duration",3]]]],[11,"new","","Creates a new event store to be used globally.",46,[[]]],[11,"new_local","","Creates a new event store to be used within a `Track`.",46,[[]]],[11,"add_event","","Add an event to this store.",46,[[["eventdata",3],["duration",3]]]],[11,"new","songbird","Creates a new Call, which will send out WebSocket messages…",47,[[["shard",4],["userid",3],["guildid",3]]]],[11,"from_driver_config","","Creates a new Call, configuring the driver as specified.",47,[[["userid",3],["guildid",3],["config",3],["shard",4]]]],[11,"standalone","","Creates a new, standalone Call which is not connected via…",47,[[["userid",3],["guildid",3]]]],[11,"standalone_from_driver_config","","Creates a new standalone Call, configuring the driver as…",47,[[["userid",3],["config",3],["guildid",3]]]],[11,"deafen","","Sets whether the current connection is to be deafened.",47,[[]]],[11,"is_deaf","","Returns whether the current connection is self-deafened in…",47,[[]]],[11,"join","","Connect or switch to the given voice channel by its Id.",47,[[["channelid",3]]]],[11,"join_gateway","","Join the selected voice channel, without running/starting…",47,[[["channelid",3]]]],[11,"leave","","Leaves the current voice channel, disconnecting from it.",47,[[]]],[11,"mute","","Sets whether the current connection is to be muted.",47,[[]]],[11,"is_mute","","Returns whether the current connection is self-muted in…",47,[[]]],[11,"update_server","","Updates the voice server data.",47,[[["string",3]]]],[11,"update_state","","Updates the internal voice state of the current user.",47,[[["string",3]]]],[11,"new","songbird::input::cached","Wrap an existing `Input` with an in-memory store,…",19,[[["input",3],["bitrate",4]],["result",6]]],[11,"with_config","","Wrap an existing `Input` with an in-memory store,…",19,[[["config",3],["bitrate",4],["input",3],["option",4]],["result",6]]],[11,"with_encoder","","Wrap an existing `Input` with an in-memory store,…",19,[[["option",4],["config",3],["input",3],["opusencoder",3]],["result",6]]],[11,"new_handle","","Acquire a new handle to this object, creating a new view…",19,[[]]],[11,"new","","Wrap an existing `Input` with an in-memory store with the…",21,[[["input",3]],["result",6]]],[11,"with_config","","Wrap an existing `Input` with an in-memory store with the…",21,[[["option",4],["input",3],["config",3]],["result",6]]],[11,"new_handle","","Acquire a new handle to this object, creating a new view…",21,[[]]],[11,"new","songbird::input::codec","Creates a new decoder, having stereo output at 48kHz.",22,[[],[["result",4],["opuserror",4]]]],[11,"from_decoder","","Creates a new decoder pre-configured by the user.",22,[[["opusdecoder",3]]]],[11,"next_frame_length","songbird::input","Tries to read the header of the next frame from an input…",31,[[["codectype",4]],[["frame",3],["ioresult",6]]]],[11,"try_seek_trivial","","Tries to seek on an input directly using sample length, if…",31,[[["codectype",4]],["option",4]]],[11,"input_start","","Returns the byte index of the first frame containing audio…",31,[[]]],[11,"from_ffprobe_json","","Extract metadata and details from the output of `ffprobe`.",34,[[["value",4]]]],[11,"from_ytdl_output","","Use `youtube-dl`\'s JSON output for metadata for an online…",34,[[["value",4]]]],[11,"take","","Move all fields from a `Metadata` object into a new one.",34,[[]]],[11,"serenity","songbird","Create a new Songbird instance for serenity.",50,[[],["arc",3]]],[11,"twilight","","Create a new Songbird instance for twilight.",50,[[["cluster",3]],["arc",3]]],[11,"initialise_client_data","","Set the bot\'s user, and the number of shards in use.",50,[[["userid",3],["into",8]]]],[11,"get","","Retreives a `Call` for the given guild, if one already…",50,[[["into",8],["guildid",3]],[["arc",3],["option",4]]]],[11,"get_or_insert","","Retreives a `Call` for the given guild, creating a new one…",50,[[["guildid",3]],[["arc",3],["mutex",3]]]],[11,"join","","Connects to a target by retrieving its relevant `Call` and…",50,[[]]],[11,"join_gateway","","Partially connects to a target by retrieving its relevant…",50,[[]]],[11,"leave","","Retrieves the handler for the given target and leaves the…",50,[[["into",8],["guildid",3]]]],[11,"remove","","Retrieves the `Call` for the given target and leaves the…",50,[[["into",8],["guildid",3]]]],[11,"process","","Handle events received on the cluster.",50,[[["twilightevent",4]]]],[11,"set_config","","Sets a shared configuration for all drivers created from…",50,[[["config",3]]]],[11,"new","songbird::tracks","Creates a new handle, using the given command sink and…",54,[[["unboundedsender",3],["trackcommand",4],["uuid",3]]]],[11,"play","","Unpauses an audio track.",54,[[],["trackresult",6]]],[11,"pause","","Pauses an audio track.",54,[[],["trackresult",6]]],[11,"stop","","Stops an audio track.",54,[[],["trackresult",6]]],[11,"set_volume","","Sets the volume of an audio track.",54,[[],["trackresult",6]]],[11,"is_seekable","","Denotes whether the underlying `Input` stream is…",54,[[]]],[11,"seek_time","","Seeks along the track to the specified position.",54,[[["duration",3]],["trackresult",6]]],[11,"add_event","","Attach an event handler to an audio track. These will…",54,[[["event",4],["eventhandler",8]],["trackresult",6]]],[11,"action","","Perform an arbitrary action on a raw `Track` object.",54,[[],["trackresult",6]]],[11,"get_info","","Request playback information and state from the audio…",54,[[],["trackqueryresult",6]]],[11,"enable_loop","","Set an audio track to loop indefinitely.",54,[[],["trackresult",6]]],[11,"disable_loop","","Set an audio track to no longer loop.",54,[[],["trackresult",6]]],[11,"loop_for","","Set an audio track to loop a set number of times.",54,[[],["trackresult",6]]],[11,"uuid","","Returns this handle\'s (and track\'s) unique identifier.",54,[[],["uuid",3]]],[11,"send","","Send a raw command to the `Track` object.",54,[[["trackcommand",4]],["trackresult",6]]],[11,"is_done","","Returns whether the track has irreversibly stopped.",41,[[]]],[11,"handle","","Clones the inner handle",56,[[],["trackhandle",3]]],[11,"new","","Create a new, empty, track queue.",55,[[]]],[11,"add_source","","Adds an audio source to the queue, to be played in the…",55,[[["driver",3],["input",3]]]],[11,"add","","Adds a `Track` object to the queue, to be played in the…",55,[[["driver",3],["track",3]]]],[11,"current","","Returns a handle to the currently playing track.",55,[[],[["trackhandle",3],["option",4]]]],[11,"dequeue","","Attempts to remove a track from the specified index.",55,[[],[["queued",3],["option",4]]]],[11,"len","","Returns the number of tracks currently in the queue.",55,[[]]],[11,"is_empty","","Returns whether there are no tracks currently in the queue.",55,[[]]],[11,"modify_queue","","Allows modification of the inner queue (i.e., deletion,…",55,[[]]],[11,"pause","","Pause the track at the head of the queue.",55,[[],["trackresult",6]]],[11,"resume","","Resume the track at the head of the queue.",55,[[],["trackresult",6]]],[11,"stop","","Stop the currently playing track, and clears the queue.",55,[[]]],[11,"skip","","Skip to the next track in the queue, if it exists.",55,[[],["trackresult",6]]],[11,"current_queue","","Returns a list of currently queued tracks.",55,[[],[["vec",3],["trackhandle",3]]]]],"p":[[4,"Bitrate"],[3,"Config"],[4,"CryptoMode"],[4,"DecodeMode"],[3,"Driver"],[4,"JoinError"],[4,"ConnectionError"],[4,"EventContext"],[13,"SpeakingUpdate"],[13,"VoicePacket"],[13,"RtcpPacket"],[4,"CoreEvent"],[4,"TrackEvent"],[4,"UntimedEvent"],[8,"EventHandler"],[4,"Event"],[3,"ChannelId"],[3,"GuildId"],[3,"UserId"],[3,"Compressed"],[4,"LengthHint"],[3,"Memory"],[3,"OpusDecoderState"],[4,"Codec"],[4,"CodecType"],[4,"Error"],[4,"DcaError"],[4,"Reader"],[8,"ReadSeek"],[3,"Restartable"],[8,"Restart"],[4,"Container"],[13,"Dca"],[3,"Frame"],[3,"Metadata"],[3,"Input"],[8,"SerenityInit"],[4,"Sharder"],[4,"Shard"],[4,"TrackCommand"],[4,"LoopState"],[4,"PlayMode"],[3,"TrackState"],[3,"Track"],[3,"ConnectionInfo"],[3,"EventData"],[3,"EventStore"],[3,"Call"],[3,"OpusCompressor"],[3,"ChildContainer"],[3,"Songbird"],[3,"SongbirdKey"],[3,"SerenitySharder"],[3,"SerenityShardHandle"],[3,"TrackHandle"],[3,"TrackQueue"],[3,"Queued"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);